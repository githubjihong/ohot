package com.ohot.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ohot.mapper.UsersMapper;
import com.ohot.service.MemberService;
import com.ohot.shop.vo.GoodsVO;
import com.ohot.vo.ArtistGroupVO;
import com.ohot.vo.CustomUser;
import com.ohot.vo.MemberVO;
import com.ohot.vo.UsersVO;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
public class HomeController {
	
	@Autowired
	UsersMapper usersMapper;
	
	@Autowired
	MemberService memberService;
	
	 @Autowired
    private JavaMailSender mailSender;
	
	// 홈페이지
	@GetMapping("/oho")
	public String homePage(Model model
							, @AuthenticationPrincipal CustomUser customUser
			) {
		log.info("홈페이지 포워딩");
		
		Map<String, Object> dmMap = new HashMap<>();
		Map<String, Object> unMemMap = new HashMap<>();
		Map<String, Object> joinMap = new HashMap<>();
		Map<String, Object> unjoinMap = new HashMap<>();
		Map<String, Object> goodsMap = new HashMap<>();
		
		dmMap.put("join", null);
		List<ArtistGroupVO> dmList = this.memberService.artistGroupList(dmMap); // 디엠리스트
		log.info("디엠 리스트 : " + dmList);
		
		if(customUser == null) { // 비회원이 홈페이지에 접속했을 경우
			unMemMap.put("join", "no");
			unMemMap.put("memNo", null);
			
			// 새로운 아티스트를 만나보세요!
			List<ArtistGroupVO> newArtistGroupList = this.memberService.artistGroupList(unMemMap);
			log.info("비회원의 전체 리스트 : " + newArtistGroupList);
			
			model.addAttribute("newArtistGroupList", newArtistGroupList);
		}
		else { // 회원이 홈페이지에 접속했을 경우
			UsersVO usersVO =  customUser.getUsersVO();
			log.info("usersVO : " + usersVO);
			int memNo = (int) usersVO.getUserNo();
			
			// 가입한 그룹 리스트
			joinMap.put("join", "yes");
			joinMap.put("memNo", memNo);
			List<ArtistGroupVO> joinArtistGroupList = this.memberService.artistGroupList(joinMap);
			log.info("회원이 가입한 그룹의 리스트 : " + joinArtistGroupList);
			
			
			// 가입하지 않은 그룹 리스트
			unjoinMap.put("join", "no");
			unjoinMap.put("memNo", memNo);
			List<ArtistGroupVO> newArtistGroupList = this.memberService.artistGroupList(unjoinMap);
			log.info("회원이 가입하지 않은 그룹의 리스트 : " + newArtistGroupList);
			
			// 사용자가 가입한 그룹의 굿즈 리스트
			goodsMap.put("memNo", memNo);
			List<GoodsVO> joinGroupGoodsList = this.memberService.joinGroupGoodsList(goodsMap);
			log.info("회원의 가입한 그룹의 굿즈 리스트 : " + joinGroupGoodsList);
			
			model.addAttribute("memNo", memNo);
			model.addAttribute("joinArtistGroupList", joinArtistGroupList);
			model.addAttribute("newArtistGroupList", newArtistGroupList);
			model.addAttribute("joinGroupGoodsList", joinGroupGoodsList);
		}
		
		model.addAttribute("dmList", dmList);
		
		return "home";
	}
	
	// 굿즈샵 리스트 비동기
	@ResponseBody
	@PostMapping("/oho/getGoodsList")
	public List<GoodsVO> getGoodsList(@RequestBody Map<String, Object> data
										, Model model
			) {
		
		String memNo = (String) data.get("memNo");
		int artGroupNo = Integer.parseInt(data.get("artGroupNo").toString());
		
		log.info("memNo : " + memNo);
		log.info("artGroupNo : " + artGroupNo);
		
		Map<String, Object> map = new HashMap<>();
		map.put("artGroupNo", artGroupNo);
		map.put("memNo", memNo);
		
		List<GoodsVO> goodsList = this.memberService.joinGroupGoodsList(map);
		
		return goodsList;
	}
	
	// 홈페이지, 굿즈샵 로그인
	@GetMapping("/login")
	public String loginPage(@RequestParam(required = false) String redirectURL
							, @AuthenticationPrincipal CustomUser customUser
			) {
		log.info("로그인 페이지 포워딩");
		log.info("loginPage -> redirectURL : "+redirectURL);
		
		// 이미 로그인한 사용자면 홈으로 리디렉트
		log.info("loginPage -> customUser : " + customUser);
		if (customUser != null) {
	        return "redirect:/oho";
		}
		
		return "login";
	}
	
	// 홈페이지, 굿즈샵 로그아웃
	@PostMapping("/logout")
	public void logout(HttpServletRequest request, HttpServletResponse response) {
		new SecurityContextLogoutHandler().logout(request, response, 
				SecurityContextHolder.getContext().getAuthentication()
				);
	}
	
	// 관리자 로그인
	@GetMapping("/admin/login")
	public String adminLogin() {
		log.info("관리자 로그인 포워딩");
		
		return "admin/adminLogin";
	}
	
	// 회원가입
	@PostMapping("/signup")
	public String signup(String newEmail 
			, String newPassword
			) {
		
		log.info("newEmail : "+ newEmail);
		log.info("newPassword : "+ newPassword);
		return "signup";
	}
	
	// 회원가입 진행
	@PostMapping("/signupAccess")
	public String signupAccess(MemberVO memberVO
			) {
		log.info("signupAccess -> memberVO : "+ memberVO);
		
		if(memberVO != null) {
			this.memberService.signUp(memberVO);
		}
		
		
		return "signup";
	}
	
	// 이메일 체크 비동기
	@ResponseBody
	@PostMapping("/emailCheck")
	public String emailCheck(@RequestBody Map<String, Object> map) {
		log.info("map : " + map);
		String email = (String) map.get("email");
		log.info("email : " + email);
		
		String result;
		
		UsersVO usersVO = this.usersMapper.findByEmail(email);
		log.info("usersVO : " + usersVO);
		if(usersVO == null) {
			result = "success";
		}else result = "fail";
		
		return result;
	}
	
	// 인증코드 발송
	@ResponseBody
	@PostMapping("/sendCode")
	public ResponseEntity<?> sendCode(@RequestBody Map<String, Object> map, HttpSession session) {
		log.info("map : "+ map);
		String email = (String) map.get("email");
		String code = createCode();
		
		// 인증 정보 객체 생성
		Map<String, Object> authInfo = new HashMap<>();
		authInfo.put("code", code);
		authInfo.put("time", System.currentTimeMillis());
		
		// 세션에 저장
		session.setAttribute("auth_" + email, authInfo);
		
		sendEmail(email, code);
		
		return ResponseEntity.ok().build();
	}
	
	// 인증번호 일치 여부 확인
	@ResponseBody
	@PostMapping("/verifyCode")
	public ResponseEntity<?> verifyCode(@RequestBody Map<String, Object> map, HttpSession session) {
		log.info("verifyCode -> map : " + map);
		String email = (String)map.get("email");
		String inputCode = (String)map.get("code");
		
		Map<String, Object> authInfo = (Map<String, Object>) session.getAttribute("auth_"+email);
		
		// 해당 이메일에 대한 인증정보 객체가 없을 경우
		if(authInfo == null) return ResponseEntity.ok("fail");
		
		String correctCode = (String)authInfo.get("code");
		long sentTime = (long)authInfo.get("time");
		long now = System.currentTimeMillis();
		
		// 유효시간 (3분 = 180,000 ms) 초과 했을 경우
		if(now-sentTime > 180000) {
			// session에서 해당 이메일 삭제
			session.removeAttribute("auth_"+email);
			return ResponseEntity.ok("timeOut");
		}
		
		// 입력코드와 세션에 저장된 코드(발급된코드)가 일치할 경우
		if(inputCode.equals(correctCode)) {
			// session에서 해당 이메일 삭제
			session.removeAttribute("auth_"+email);
			return ResponseEntity.ok("success");
		}
		
		return ResponseEntity.ok("fail");
	}
	
	// 설정한 메일로 코드 전송
	private void sendEmail(String email, String code) {
		SimpleMailMessage message = new SimpleMailMessage();
		message.setTo(email);
		message.setSubject("[oHoT] 이메일 인증 코드");
		message.setText("인증코드: " +  code);
		mailSender.send(message);
	}
	
	// 인증코드 6자리 생성
	private String createCode() {
		return String.valueOf((int)(Math.random() * 900000 ) + 100000 );
	}
	
}

