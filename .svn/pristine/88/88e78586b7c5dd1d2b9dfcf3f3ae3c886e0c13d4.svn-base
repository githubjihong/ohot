<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ohot.mapper.MemberMapper">
	<!-- 회원가입 -->
	<insert id="signUp" parameterType="com.ohot.vo.MemberVO">
		<selectKey resultType="int" order="BEFORE" keyProperty="memNo">
			SELECT NVL(MAX(MEM_NO),0)+1 AS "신규 회원번호"
			FROM MEMBER
		</selectKey>
		INSERT INTO MEMBER ( MEM_NO, MEM_LAST_NAME, MEM_FIRST_NAME
		                   , MEM_NICKNM, MEM_EMAIL, MEM_TELNO
		                    , MEM_BIRTH, MEM_PSWD)
		VALUES(#{memNo}, #{memLastName}, #{memFirstName}
				, #{memNicknm}, #{memEmail}, #{memTelno}
				, #{memBirth}, #{memPswd} )
	</insert>
	
	<!-- 기본으로 ROLD_MEM 권한 insert	-->
	<insert id="insertAuth" parameterType="com.ohot.vo.MemberVO">
		INSERT INTO AUTH(MEM_NO)
		VALUES (#{memNo})
	</insert>
	
	<select id="findByEmail" parameterType="string" resultMap="memberMap">
	    SELECT M.MEM_NO, M.MEM_LAST_NAME, M.MEM_FIRST_NAME, M.MEM_NICKNM
	            , M.MEM_EMAIL, M.MEM_TELNO, M.MEM_BIRTH, M.MEM_PSWD, M.JOIN_YMD
	            , M.SECSN_YMD, M.MEM_ACCESS_TOKEN, M.ENABLED
	            , M.MEM_STAT_SEC_CODE_NO, M.MEM_SEC_CODE_NO, M.MEM_DEL_YN
	            , A.MEM_NO, A.AUTH_NM
	    FROM MEMBER M, AUTH A
	    WHERE M.MEM_NO = A.MEM_NO
	    AND MEM_EMAIL = #{memEmail}
	    AND M.MEM_DEL_YN = 'N'
	</select>
	
	<resultMap type="com.ohot.vo.MemberVO" id="memberMap">
		<result property="rnum" column="RNUM"/>
		<result property="memNo" column="MEM_NO"/>
		<result property="memLastName" column="MEM_LAST_NAME"/>
		<result property="memFirstName" column="MEM_FIRST_NAME"/>
		<result property="memNicknm" column="MEM_NICKNM"/>
		<result property="memEmail" column="MEM_EMAIL"/>
		<result property="memTelno" column="MEM_TELNO"/>
		<result property="memBirth" column="MEM_BIRTH"/>
		<result property="memPswd" column="MEM_PSWD"/>
		<result property="joinYmd" column="JOIN_YMD"/>
		<result property="secsnYmd" column="SECSN_YMD"/>
		<result property="memAccessToken" column="MEM_ACCESS_TOKEN"/>
		<result property="enabled" column="ENABLED"/>
		<result property="memStatSecCodeNo" column="MEM_STAT_SEC_CODE_NO"/>
		<result property="memSecCodeNo" column="MEM_SEC_CODE_NO"/>
		<result property="memDelYn" column="MEM_DEL_YN"/>
		<result property="authNm" column="AUTH_NM"/>
		<result property="snsMemYn" column="SNS_MEM_YN"/>
		<association property="artistVO" resultMap="artistMap"></association>
		<collection property="authVOList" resultMap="authMap"></collection>
	</resultMap>
	
	<resultMap type="com.ohot.vo.ArtistVO" id="artistMap">
		<result property="artNo" column="ART_NO"/>
		<result property="artGroupNo" column="ART_GROUP_NO"/>
		<result property="artActNm" column="ART_ACT_NM"/>
		<result property="artExpln" column="ART_EXPLN"/>
		<result property="artRegYmd" column="ART_REG_YMD"/>
		<result property="fileGroupNo" column="FILE_GROUP_NO"/>
		<result property="memNo" column="MEM_NO"/>
		<result property="artDelYn" column="ART_DEL_YN"/>
		<association property="fileGroupVO" resultMap="fileGroupMap"></association>
	</resultMap>
	
	<resultMap type="com.ohot.vo.FileGroupVO" id="fileGroupMap">
		<result property="fileGroupNo" column="FILE_GROUP_NO"/>
		<result property="fileRegdate" column="FILE_REGDATE"/>
		<collection property="fileDetailVOList" resultMap="fileDetailMap"></collection>
	</resultMap>
	
	<resultMap type="com.ohot.vo.FileDetailVO" id="fileDetailMap">
		<result property="fileSn" column="FILE_SN"/>
		<result property="fileGroupNo" column="FILE_GROUP_NO"/>
		<result property="fileOriginalName" column="FILE_ORIGINAL_NAME"/>
		<result property="fileSaveName" column="FILE_SAVE_NAME"/>
		<result property="fileSaveLocate" column="FILE_SAVE_LOCATE"/>
		<result property="fileSize" column="FILE_SIZE"/>
		<result property="fileExt" column="FILE_EXT"/>
		<result property="fileMime" column="FILE_MIME"/>
		<result property="fileFancysize" column="FILE_FANCYSIZE"/>
		<result property="fileSaveDate" column="FILE_SAVE_DATE"/>
		<result property="fileDowncount" column="FILE_DOWNCOUNT"/>
	</resultMap>
	
	<resultMap type="com.ohot.vo.AuthVO" id="authMap">
		<result property="memNo" column="MEM_NO"/>
		<result property="authNm" column="AUTH_NM"/>
	</resultMap>
	
	<!-- 회원 조회 -->
	<select id="memberList" resultType="com.ohot.vo.MemberVO">
		SELECT MEM_NO, MEM_LAST_NAME, MEM_FIRST_NAME, MEM_NICKNM, MEM_EMAIL, REGEXP_REPLACE(MEM_TELNO, '(.{3})(.{4})(.{4})', '\1-\2-\3') AS MEM_TELNO
			  , REGEXP_REPLACE(MEM_BIRTH, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS MEM_BIRTH, MEM_PSWD
			  , REGEXP_REPLACE(JOIN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS JOIN_YMD
			  , REGEXP_REPLACE(SECSN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS SECSN_YMD
			  , MEM_ACCESS_TOKEN, ENABLED, MEM_STAT_SEC_CODE_NO, MEM_SEC_CODE_NO, MEM_DEL_YN
		FROM MEMBER
		AND MEM_DEL_YN = 'N'
	</select>
	
	<!-- 회원 검색 조회 -->
	<select id="memberSearchList" resultMap="memberMap" parameterType="hashMap">
		SELECT S.*
		FROM
		(
			SELECT ROW_NUMBER() OVER(ORDER BY T.RNUM DESC) RRNUM, T.*
			FROM
			(
			    SELECT ROW_NUMBER() OVER(ORDER BY MEM_NO ASC) AS RNUM, MEM_NO, MEM_LAST_NAME, MEM_FIRST_NAME, MEM_NICKNM, MEM_EMAIL
	                  , REGEXP_REPLACE(MEM_TELNO, '(.{3})(.{4})(.{4})', '\1-\2-\3') AS MEM_TELNO
	                  , REGEXP_REPLACE(MEM_BIRTH, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS MEM_BIRTH, MEM_PSWD
	                  , REGEXP_REPLACE(JOIN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS JOIN_YMD
	                  , REGEXP_REPLACE(SECSN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS SECSN_YMD
	                  , MEM_ACCESS_TOKEN, ENABLED
	                  , FN_CODE_NO_TO_CODE_NM(MEM_STAT_SEC_CODE_NO) AS MEM_STAT_SEC_CODE_NO
	                  , FN_CODE_NO_TO_CODE_NM(MEM_SEC_CODE_NO) AS  MEM_SEC_CODE_NO
	                  , MEM_DEL_YN
	            FROM MEMBER
				WHERE 1 = 1
				AND MEM_DEL_YN = 'N'
				<include refid="where"></include>
			)T
		 )S
		WHERE S.RRNUM BETWEEN (#{currentPage} * #{size}) - (#{size} - 1) AND (#{currentPage} * #{size})
	</select>
	
	<sql id="where">
		<if test="keyword!=null and keyword!=''">
			AND (
			 	<choose>
			 		<when test="mode=='memEmail'">
			 			 MEM_EMAIL LIKE '%' || #{keyword} || '%'
			 		</when>
			 		<when test="mode=='memBirth'">
			 			 MEM_BIRTH LIKE '%' || #{keyword} || '%'
			 		</when>
			 		<otherwise>
			 			(MEM_EMAIL LIKE '%' || #{keyword} || '%' OR MEM_BIRTH LIKE '%' || #{keyword} || '%')
			 		</otherwise>
			 	</choose>
		 	)
		</if>
		
		<!-- 회원 유형 추가  -->
		<if test="memberType!=null and memberType!=''">
			AND MEM_SEC_CODE_NO = #{memberType}
		</if>		
	</sql>
	
	<select id="memberDetail" parameterType="com.ohot.vo.MemberVO">
		SELECT MEM_NO, MEM_LAST_NAME, MEM_FIRST_NAME, MEM_NICKNM, MEM_EMAIL, REGEXP_REPLACE(MEM_TELNO, '(.{3})(.{4})(.{4})', '\1-\2-\3') AS MEM_TELNO
			  , REGEXP_REPLACE(MEM_BIRTH, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS MEM_BIRTH, MEM_PSWD
			  , REGEXP_REPLACE(JOIN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS JOIN_YMD
			  , REGEXP_REPLACE(SECSN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS SECSN_YMD
			  , MEM_ACCESS_TOKEN, ENABLED, MEM_STAT_SEC_CODE_NO, MEM_SEC_CODE_NO
			  , MEM_DEL_YN
		FROM MEMBER
		WHERE MEM_NO = #{memNo}
		AND MEM_DEL_YN = 'N'
	</select>
	
	
	<update id="memberUpdate" parameterType="com.ohot.vo.MemberVO">
		UPDATE MEMBER
		SET	MEM_LAST_NAME = #{memLastName}, MEM_FIRST_NAME = #{memFirstName}, MEM_NICKNM = #{memNicknm}, MEM_EMAIL = #{memEmail}, MEM_TELNO = #{memTelno}
			  , MEM_BIRTH = #{memBirth}, JOIN_YMD = #{joinYmd}, SECSN_YMD= #{secsnYmd}, MEM_STAT_SEC_CODE_NO = #{memStatSecCodeNo}
			  , MEM_SEC_CODE_NO = #{memSecCodeNo}
		WHERE MEM_NO = #{memNo}
	</update>
	
	<select id="getTotalMember" parameterType="hashMap" resultType="int">
		SELECT COUNT(*)
		FROM MEMBER
		WHERE 1 = 1
		AND MEM_DEL_YN = 'N'
		<include refid="where"></include>
	</select>
	
	<update id="memberDelete" parameterType="int">
		UPDATE MEMBER
		SET MEM_DEL_YN = 'Y'
		WHERE MEM_NO = #{memNo}
	</update>
	
	<update id="authUpdate" parameterType="com.ohot.vo.MemberVO">
		UPDATE AUTH
		SET AUTH_NM = 'ROLE_ART'
		WHERE MEM_NO = #{memNo}
	</update>
	
	<!-- 멤버테이블 정보도 가지고 있는 아티스트 회원 상세조회 모달에 뿌려줄 것 
	edit->memberVO : MemberVO(rnum=0, memNo=12, memLastName=null, memFirstName=null, memNicknm=null
		 , memEmail=null, memTelno=null, memBirth=null, memPswd=null, joinYmd=null, secsnYmd=null
		 , memAccessToken=null, enabled=0, memStatSecCodeNo=null, memSecCodeNo=null, memDelYn=null
		 , authNm=null, authVOList=null, artistVO=null)
		 
	memNo : 회원 번호(아티스트, 일반)
	artNo : 아티스트 번호
	memNo = artNo ? 다름
	
	* 일반 회원 : 회원 번호는 1개
	* 아티스트 : 회원 번호 + 아티스트 번호(회원 번호 : 아티스트 번호 = 1 : 1)
	* 아티스트가 로그인 할 때 회원 번호로 로그인 함
	 -->
	<select id="modalDetailInfo" resultMap="memberMap" >
		SELECT  M.MEM_NO, M.MEM_LAST_NAME, M.MEM_FIRST_NAME, M.MEM_NICKNM, M.MEM_EMAIL
		, REGEXP_REPLACE(M.MEM_TELNO, '(.{3})(.{4})(.{4})', '\1-\2-\3') AS MEM_TELNO
		, REGEXP_REPLACE(M.MEM_BIRTH, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS MEM_BIRTH
        , REGEXP_REPLACE(M.JOIN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS JOIN_YMD
        , REGEXP_REPLACE(M.SECSN_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS SECSN_YMD, M.MEM_STAT_SEC_CODE_NO, M.MEM_SEC_CODE_NO, M.MEM_DEL_YN
        , A.ART_NO, A.ART_GROUP_NO, A.ART_ACT_NM, A.ART_EXPLN, REGEXP_REPLACE(A.ART_REG_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS ART_REG_YMD 
        , A.FILE_GROUP_NO, A.ART_DEL_YN
        , FG.FILE_REGDATE
        , FD.FILE_SN, FD.FILE_ORIGINAL_NAME, FD.FILE_SAVE_NAME, FD.FILE_SAVE_LOCATE, FD.FILE_SIZE, FD.FILE_EXT
        , FD.FILE_MIME, FD.FILE_FANCYSIZE, FD.FILE_SAVE_DATE, FD.FILE_DOWNCOUNT
		FROM MEMBER M 
		    LEFT OUTER JOIN ARTIST A ON(M.MEM_NO = A.MEM_NO)
		    LEFT OUTER JOIN FILE_GROUP FG ON(A.FILE_GROUP_NO = FG.FILE_GROUP_NO)
		    LEFT OUTER JOIN (
		         SELECT FILE_SN, FILE_GROUP_NO, FILE_ORIGINAL_NAME, FILE_SAVE_NAME
		                , FILE_SAVE_LOCATE, FILE_SIZE, FILE_EXT, FILE_MIME, FILE_FANCYSIZE
		                , FILE_SAVE_DATE, FILE_DOWNCOUNT, ROW_NUMBER() OVER (PARTITION BY FILE_GROUP_NO ORDER BY FILE_SN DESC) AS RN
		         FROM FILE_DETAIL
		    ) FD ON FG.FILE_GROUP_NO = FD.FILE_GROUP_NO AND FD.RN = 1
		WHERE 1 = 1
		<if test="memNo!=0 and memNo!=null">
			AND M.MEM_NO = #{memNo}		
		</if>
		ORDER BY ART_NO DESC
	</select>
	
	
	
	
	<!-- 홈에서 필요한 xml 시작 -->
	<resultMap type="com.ohot.shop.vo.GoodsVO" id="joinGroupGoodsMap">
		<result property="qty" column="QTY"/>
		<result property="gdsDelYn" column="GDS_DEL_YN"/>
		<result property="gdsNo" column="GDS_NO"/>
		<result property="gdsType" column="GDS_TYPE"/>
		<result property="gdsNm" column="GDS_NM"/>
		<result property="unitPrice" column="UNIT_PRICE"/>
		<result property="expln" column="EXPLN"/>
		<result property="pic" column="PIC"/>
		<result property="regDt" column="REG_DT"/>
		<result property="commCodeGrpNo" column="COMM_CODE_GRP_NO"/>
		<result property="artGroupNo" column="ART_GROUP_NO"/>
		<result property="artNo" column="ART_NO"/>
		<result property="artGroupNm" column="ART_GROUP_NM"/>
		<result property="fileGroupNo" column="FILE_GROUP_NO"/>
		<association property="fileGroupVO" resultMap="fileGroupMap"></association>
	</resultMap>
	
	<resultMap type="com.ohot.vo.ArtistGroupVO" id="artistGroupMap">
		<result property="rnum" column="RNUM"/>
		<result property="artGroupNo" column="ART_GROUP_NO"/>
		<result property="artGroupDebutYmd" column="ART_GROUP_DEBUT_YMD"/>
		<result property="artGroupNm" column="ART_GROUP_NM"/>
		<result property="artGroupExpln" column="ART_GROUP_EXPLN"/>
		<result property="artGroupRegYmd" column="ART_GROUP_REG_YMD"/>
		<result property="artGroupDelYn" column="ART_GROUP_DEL_YN"/>
		<result property="fileGroupNo" column="FILE_GROUP_NO"/>
		<association property="fileGroupVO" resultMap="fileGroupMap"></association>
	</resultMap>
	
	<!-- 가입한 그룹의 굿즈 리스트 -->
	<select id="joinGroupGoodsList" parameterType="hashmap" resultMap="joinGroupGoodsMap">
		SELECT JG.ART_GROUP_NO, JG.ART_GROUP_NM
		        , G.GDS_NO, G.GDS_TYPE, G.GDS_NM, G.UNIT_PRICE, G.EXPLN
		        , G.PIC, G.REG_DT, G.COMM_CODE_GRP_NO, G.ART_NO, G.FILE_GROUP_NO
		        , G.QTY, G.GDS_DEL_YN
		        , FG.FILE_REGDATE
		        , FD.FILE_SN, FD.FILE_ORIGINAL_NAME, FD.FILE_SAVE_NAME
		        , FD.FILE_SAVE_LOCATE, FD.FILE_SIZE, FD.FILE_EXT, FD.FILE_MIME
		        , FD.FILE_FANCYSIZE, FD.FILE_SAVE_DATE, FD.FILE_DOWNCOUNT
		FROM (SELECT AG.ART_GROUP_NO, AG.ART_GROUP_NM
		        FROM ARTIST_GROUP AG
		        WHERE ART_GROUP_NO IN (SELECT ART_GROUP_NO
		            FROM COMMUNITY_PROFILE
		            WHERE MEM_NO = #{memNo})) JG
		                LEFT OUTER JOIN GOODS G ON(JG.ART_GROUP_NO = G.ART_GROUP_NO)
		                LEFT OUTER JOIN FILE_GROUP FG ON (G.FILE_GROUP_NO = FG.FILE_GROUP_NO)
		                LEFT OUTER JOIN FILE_DETAIL FD ON (FG.FILE_GROUP_NO = FD.FILE_GROUP_NO)
        -- WHERE FILE_SN = 1
        <if test="artGroupNo != null and artGroupNo != ''">
        WHERE JG.ART_GROUP_NO = #{artGroupNo}
        </if>
        ORDER BY REG_DT DESC
	</select>
	
	<!-- 동적쿼리를 이용한 그룹 리스트 -->
	<select id="artistGroupList" parameterType="hashmap" resultMap="artistGroupMap">
		SELECT AG.ART_GROUP_NO, AG.ART_GROUP_DEBUT_YMD, AG.ART_GROUP_NM, AG.ART_GROUP_EXPLN
		    , REGEXP_REPLACE(AG.ART_GROUP_REG_YMD, '(.{4})(.{2})(.{2})', '\1-\2-\3') AS ART_GROUP_REG_YMD
		    , AG.ART_GROUP_DEL_YN, FG.FILE_GROUP_NO, FG.FILE_REGDATE
		        , FD.FILE_SN, FD.FILE_ORIGINAL_NAME, FD.FILE_SAVE_NAME, FD.FILE_SAVE_LOCATE, FD.FILE_SIZE, FD.FILE_EXT
		        , FD.FILE_MIME, FD.FILE_FANCYSIZE, FD.FILE_SAVE_DATE, FD.FILE_DOWNCOUNT
		FROM ARTIST_GROUP AG 
		LEFT OUTER JOIN FILE_GROUP FG ON(AG.FILE_GROUP_NO = FG.FILE_GROUP_NO)
		LEFT OUTER JOIN (
		      SELECT FILE_SN, FILE_GROUP_NO, FILE_ORIGINAL_NAME, FILE_SAVE_NAME
		             , FILE_SAVE_LOCATE, FILE_SIZE, FILE_EXT, FILE_MIME, FILE_FANCYSIZE
		             , FILE_SAVE_DATE, FILE_DOWNCOUNT, ROW_NUMBER() OVER (PARTITION BY FILE_GROUP_NO ORDER BY FILE_SN DESC) AS RN
		    FROM FILE_DETAIL
		) FD ON FG.FILE_GROUP_NO = FD.FILE_GROUP_NO AND FD.RN = 1
		WHERE 1 = 1
		<if test="join != null">
			<if test="join.equals('yes') and memNo != null"> <!-- 가입한 그룹 리스트 조건 -->
			AND ART_GROUP_NO IN (SELECT ART_GROUP_NO
	                        FROM COMMUNITY_PROFILE
	                        WHERE MEM_NO = #{memNo})
			</if>
			<if test="join.equals('no') and memNo != null"> <!-- 가입하지 않은 그룹 리스트 조건 -->
			AND ART_GROUP_NO NOT IN (SELECT ART_GROUP_NO
	                        FROM COMMUNITY_PROFILE
	                        WHERE MEM_NO = 8)
			</if>
		</if>
		ORDER BY ART_GROUP_NM
	</select>
	
	<!-- 핸드폰 번호 중복 체크 -->
	<select id="phoneDuplCheck" parameterType="String" resultType="com.ohot.vo.MemberVO">
		SELECT MEM_NO, MEM_LAST_NAME, MEM_FIRST_NAME
		        , MEM_NICKNM, MEM_EMAIL, MEM_TELNO, MEM_BIRTH
		        , MEM_PSWD, JOIN_YMD, SECSN_YMD, MEM_ACCESS_TOKEN
		        , ENABLED, MEM_STAT_SEC_CODE_NO, MEM_SEC_CODE_NO
		        , MEM_DEL_YN, SNS_MEM_YN
		FROM MEMBER
		WHERE MEM_STAT_SEC_CODE_NO != '002'
		AND MEM_TELNO = #{memTelno}
	</select>
	
	<!-- 닉네임 중복 체크 -->
	<select id="nickDuplCheck" parameterType="String" resultType="com.ohot.vo.MemberVO">
		SELECT MEM_NO, MEM_LAST_NAME, MEM_FIRST_NAME
		        , MEM_NICKNM, MEM_EMAIL, MEM_TELNO, MEM_BIRTH
		        , MEM_PSWD, JOIN_YMD, SECSN_YMD, MEM_ACCESS_TOKEN
		        , ENABLED, MEM_STAT_SEC_CODE_NO, MEM_SEC_CODE_NO
		        , MEM_DEL_YN, SNS_MEM_YN
		FROM MEMBER
		WHERE MEM_STAT_SEC_CODE_NO != '002'
		AND MEM_NICKNM = #{memNicknm}
	</select>
	
	<!-- 홈에서 필요한 xml 끝 -->
</mapper>