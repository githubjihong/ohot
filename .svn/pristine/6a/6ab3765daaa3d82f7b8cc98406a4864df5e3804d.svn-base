package com.ohot.employee.controller;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ohot.employee.service.EmployeeService;
import com.ohot.employee.vo.ApprovalLineVO;
import com.ohot.employee.vo.ApprovalVO;
import com.ohot.employee.vo.DepartmentVO;
import com.ohot.vo.EmployeeVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/emp")
public class EmployeeController {
	
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/home")
	public String home(){
		log.info("직원 홈페이지 (전자결재)");
		return "employee/home";
	}
	
	@GetMapping("/treeList")
	public String treeList() {
		
		return "employee/tree";
	}
	
	@ResponseBody
	@GetMapping("/treeListAjax")
	public String treeListAjax(){
		
		List<DepartmentVO> treeList = this.employeeService.treeList();
		
		
		JSONArray jsonArray = new JSONArray();
		Set<String> deptSet = new HashSet<>();
		
		for(DepartmentVO row : treeList) {
			
			log.info("row:" + row);
			
			String deptNo = String.valueOf(row.getDeptNo());
			String upDept = (row.getUpDept() == 0) ? "#" : String.valueOf(row.getUpDept());
			String deptNm = row.getDeptNm();
			
			// json  import org.json.JSONArray; import org.json.JSONObject; 사용!
			if(!deptSet.contains(deptNo)) {
				
				
				JSONObject deptNode = new JSONObject();
				deptNode.put("id", deptNo);
				deptNode.put("parent", upDept);
				deptNode.put("text", deptNm != null ? deptNm : "(이름없음)");
				deptNode.put("icon", "fas fa-folder");
				jsonArray.put(deptNode);
				deptSet.add(deptNo);
			}
			
			//사원정보 추가
			List<EmployeeVO> empList = row.getEmployeeVOList();
			
			if(empList != null) {
				
				for(EmployeeVO emp : empList) {
					
					log.info("emp" + emp);
					
					String empNo = String.valueOf(emp.getEmpNo());
					String empNm = emp.getEmpNm();
					String position = emp.getJbgdCd();
					
					JSONObject empNode = new JSONObject();
					empNode.put("id", empNo);
					empNode.put("parent", deptNo);
					empNode.put("text", empNm + " (" + position + ")");
					empNode.put("icon", "fas fa-user-circle");
					
					
					JSONObject data = new JSONObject();
					String empEmail = emp.getEmpEmlAddr();
					position = emp.getJbgdCd();
					/* deptNm = emp.getDepartmentVO().getDeptNm(); */
					
					data.put("email", empEmail);
					data.put("position", position);
					data.put("deptNm", deptNm);
					data.put("empNm", empNm);
					
					empNode.put("data", data);
					
					jsonArray.put(empNode);
				}
			}
		}
		log.info("jsonArray : " +jsonArray.toString());
		
		return jsonArray.toString();
	}
	
	@GetMapping("/atrzHome")
	public String atrzHome() {
		
		return "employee/atrz/atrzHome";
	}
	
	@GetMapping("/empCalendar")
	public String empCalendar() {
		
		return "employee/calendar/empCalendar";
	}
	
	@GetMapping("/atrzHome/form")
	public String documentList(@RequestParam(value="formNo") int formNo) {
		
		log.info("formNo : " + formNo);
		
		if(formNo == 2) {
			return "employee/document/ticketPlan";
		}else {
			return "employee/document/goodsPlan";
		}
		
	}
	
	@GetMapping("/atrzList")
	public String atrzList() {
		
		return "employee/atrz/atrzList";
	}
	
	@GetMapping("/atrzDocBox")
	public String atrzDocBox() {
		
		return "employee/atrz/atrzDocBox";
	}
	
	@GetMapping("/empProfile")
	public String empProfile() {
		
		return "employee/empProfile/profile";
	}
	
	@ResponseBody
	@PostMapping("/saveApprovalLine")
	public Map<String, Object> saveApprovalLine(@RequestBody ApprovalLineVO data) {

		log.info("approvals" + data.getApprovals());
		log.info("referrers" + data.getReferrers());
		log.info("drafter" + data.getDrafter());
		
		List<ApprovalVO> approvalVOList = data.getApprovals();
		List<ApprovalVO> referrerVOList = data.getReferrers();
		ApprovalVO drafter = data.getDrafter();
		
		Map<String, Object> resultMap = new HashMap<>();
		resultMap.put("approvalVOList", approvalVOList);
		resultMap.put("referrerVOList", referrerVOList);
		resultMap.put("drafter", drafter);
	
		return resultMap;
	}
}
