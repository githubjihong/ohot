package com.ohot.home.live.controller;

import java.util.List;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ohot.home.community.service.CommunityService;
import com.ohot.home.community.vo.CommunityProfileVO;
import com.ohot.home.live.service.StreamService;
import com.ohot.home.live.vo.StreamVO;
import com.ohot.home.media.service.MediaLiveBoardService;
import com.ohot.home.media.vo.MediaPostVO;
import com.ohot.vo.CustomUser;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/oho/community")
@RequiredArgsConstructor
public class LiveController {
	
	  private final StreamService streamService;
      private final CommunityService communityService;
      private final MediaLiveBoardService mediaLiveBoardService;
      
	  @PreAuthorize("hasAnyRole('MEM', 'ART')")
	  @ModelAttribute("communityProfileVO")
	  public CommunityProfileVO getCommunityProfile(
			  @RequestParam("artGroupNo") Integer artGroupNo
			  , @AuthenticationPrincipal CustomUser userVO
			  ) {
		  // userVO에서 getter로 유저 정보 접근 -> 보안
		  int memNo = (int)userVO.getUsersVO().getUserNo();
		  
		  log.info("getCommunityProfile-> memNo: {}", memNo);
		  
		  CommunityProfileVO communityProfileVO = new CommunityProfileVO();
		  // user넘버랑 아티그룹넘버를 파라미터로 넘김
		  // 근데 그럼 비회원일때는 어케 처리하냐...
		  communityProfileVO.setArtGroupNo(artGroupNo);
		  communityProfileVO.setMemNo(memNo);
		  
		  // 어차피 커뮤니티 가입한 멤버만 접근 가능하니까 이미 커뮤니티 프로필 정보를 가진 사용자임
		  communityProfileVO = communityService.profileDetail(communityProfileVO);
		  log.info("getCommunityProfile->communityProfileVO: {}", communityProfileVO);
		  
		  // 비회원이면 communityProfileVO의 profileNo가 null일거니까 이걸로 null체크해서 비회원 예외처리
		  return communityProfileVO; 
	 }
	 
	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/live")
	public String liveHome(
			@RequestParam(value = "artGroupNo") int artGroupNo,
			@ModelAttribute(value = "communityProfileVO") CommunityProfileVO communityProfileVO,
			Model model) {
		log.info("라이브 홈 진입 artGroupNo: {}, comPrfileVO: {}", artGroupNo, communityProfileVO);
		
		// 해당 커뮤니티 가입한 회원여부 체크
		int comProfileNo = communityProfileVO.getComProfileNo();
		if(comProfileNo == 0) {
			// 커뮤가입 프로세스로 처리
			return "home";
		}
		
		//방송 정보 반환
		StreamVO liveStreamVO = streamService.getSreamByArtGroupNo(artGroupNo); // 상태코드 start인 방송정보 반환

		if(liveStreamVO != null) {
			log.info("liveHome->liveStreamVO: {}", liveStreamVO);
			model.addAttribute("liveStreamVO", liveStreamVO);
		}
		
		StreamVO streamVOParams = new StreamVO();
		streamVOParams.setStreamStat("end");
		// 지난 방송 리스트 반환
		List<StreamVO> streamVOList = streamService.getStreamList(streamVOParams);
		log.debug("liveHome-> streamVOList: {}", streamVOList);
		
		model.addAttribute("streamVOList", streamVOList);
		
		return "live/liveMain";
	}
	
	// 방송 시청 페이지
	@GetMapping("/live/stream")
	public String getViewerPage() {
		// 방송정보, 방송자 정보 , 댓글 정보, 채팅 정보 넘겨야됨
		
		return "live/viewer";
	}
}
