package com.ohot.home.media.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ohot.home.media.service.MediaLiveBoardService;
import com.ohot.home.media.vo.MediaPostVO;
import com.ohot.mapper.FileGroupMapper;
import com.ohot.vo.FileDetailVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/oho/community")
public class MediaController {
	
	@Autowired
	MediaLiveBoardService mediaLiveBoardService;
	
	@Autowired
	FileGroupMapper fileGroupMapper;
	
	/*
	 * 미디어 메인페이지
	 *
	 */
	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/media")
	public String mediaHome(@RequestParam(value = "artGroupNo") String artGroupNo
			, Model model
			, Principal principal) {
		
		log.info("media page진입, artGroupNo: {}", artGroupNo);
		
		// 시큐리티 회원 정보
		// 이걸로 멤버쉽인지 아닌지 판별해야 될거 같은데 
		log.info("mediaHome->user정보 Principal: {}", principal);
		
		// 조회 조건 추가영역
		Map<String, Object> params = new HashMap<>();
		params.put("artGroupNo", artGroupNo);
		params.put("mediaDelYn", "N");
		
		List<MediaPostVO> mediaPostVOList = mediaLiveBoardService.getMediaSerchList(params);
		log.info("mediaHome->mediaPostVoList: {}", mediaPostVOList);
		
		// 배너 최대 갯수 5개로 제한
		// Stream을 사용해 보자
		List<MediaPostVO> banerPostVOList = mediaPostVOList.stream()
														.filter(mediaPostVo -> "Y".equals(mediaPostVo.getIsbannerYn()))
														.limit(5)
														.collect(Collectors.toList()); //왜 바로 toList가 아니고 collectors지?
		
		//파일 썸네일 경로 처리
		setThumbNailPath(mediaPostVOList);
		setThumbNailPath(banerPostVOList);
		
		model.addAttribute("mediaPostVOList", mediaPostVOList);
		model.addAttribute("banerPostVOList", banerPostVOList);
		
		return "media/mediaMain";
	}
	
	/*
	 * 최신 미디어 페이지
	 * 
	 */
	
//	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/media/new")
	public String newMediaHome(@RequestParam(value = "artGroupNo") String artGroupNo
			,Model model
			,Principal principal) {
		
		log.info("newMediaList  진입");
		
		// 조회 조건 추가영역
		Map<String, Object> params = new HashMap<>();
		params.put("artGroupNo", artGroupNo);
		params.put("mediaMebershipYn", "N");
		params.put("mediaDelYn", "N");
		
		// 아티스트그룹 별 미디어포스트 리스트
		List<MediaPostVO> mediaPostVOList = mediaLiveBoardService.getMediaSerchList(params);
		
		
		//파일 썸네일 경로 처리
		setThumbNailPath(mediaPostVOList);
		
		model.addAttribute("mediaPostVOList", mediaPostVOList);
		
		log.info("newMediaHome->mediaPostVOList: {}", mediaPostVOList);
		
		return "media/newMediaList";
	}
	
//	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/media/membership")
	public String membershipMediaHome(@RequestParam(value = "artGroupNo") String artGroupNo
			,Model model
			,Principal principal) {
		// 멤버쉽 회원만 접근해야함
		
		
		log.info("newMediaList  진입");
		
		// 조회 조건 추가영역
		Map<String, Object> params = new HashMap<>();
		params.put("artGroupNo", artGroupNo);
		params.put("mediaMebershipYn", "Y");
		params.put("mediaDelYn", "N");
		
		// 아티스트그룹 별 미디어포스트 리스트
		List<MediaPostVO> mediaPostVOList = mediaLiveBoardService.getMediaSerchList(params);
		
		//파일 썸네일 경로 처리
		setThumbNailPath(mediaPostVOList);
		
		model.addAttribute("mediaPostVOList", mediaPostVOList);
		
		log.info("membershipMediaHome->mediaPostVOList: {}", mediaPostVOList);
		
		return "media/membershipMediaList";
	}
	
//	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/media/all")
	public String allMediaHome(@RequestParam(value = "artGroupNo") String artGroupNo
			,Model model
			,Principal principal) {
		log.info("newMediaList  진입");
		
		// 조회 조건 추가영역
		Map<String, Object> params = new HashMap<>();
		params.put("artGroupNo", artGroupNo);
		params.put("mediaDelYn", "N");
		
		// 아티스트그룹 별 미디어포스트 리스트
		List<MediaPostVO> mediaPostVOList = mediaLiveBoardService.getMediaSerchList(params);
		
		//파일 썸네일 경로 처리, 멤버쉽 N일때 썸네일 처리
		//멤버쉽 Y일때 썸네일 변경
		
		setThumbNailPath(mediaPostVOList);
		
		
		model.addAttribute("mediaPostVOList", mediaPostVOList);
		
		log.info("allMediaHome->mediaPostVOList: {}", mediaPostVOList);
		
		return "media/allMediaList";
	}
	
// 미디어 게시글 상세
//	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/media/post")
	public String mediaPostDetail(@RequestParam(value = "artGroupNo") String artGroupNo
			, @RequestParam(value = "postNo") Integer mediaPostNo
			,Model model
			,Principal principal) {
		log.info("mediaPostDetail  진입");
		
		// 조회 조건 추가영역
		Map<String, Object> params = new HashMap<>();
		params.put("artGroupNo", artGroupNo);
		params.put("mediaPostNo", mediaPostNo);
		
		// 아티스트그룹 별 미디어포스트 1개
		MediaPostVO mediaPostVO = mediaLiveBoardService.getMediaDetail(params);
		
		// 상세인 썸네일 필요없음
		model.addAttribute("mediaPostVO", mediaPostVO);
		
		log.info("newMediaHome->mediaPostVO: {}", mediaPostVO);
		
		return "media/mediaPostDetail";
	}
	
	// 썸네일 경로 처리
	private void setThumbNailPath(List<MediaPostVO> mediaPostVOList) {
		//파일 디테일 경로 가져오기
		
		// 일단 포스트에 저장된 파일 그룹넘버를 가져와야함
		// 
		FileDetailVO fileDetailVO = new FileDetailVO();
		
		for(MediaPostVO postVO : mediaPostVOList) {
			
			// 멤버쉽일땐 경로 다르게 처리
			if(postVO.getMediaMebershipYn().equals("N")) {
				
				postVO.setThumNailPath(postVO.getMediaVideoUrl());
			}else {
			// 멤버쉽 아닌 미디어
			// 하나씩 파일그룹 넘버 꺼내기
			fileDetailVO.setFileGroupNo(postVO.getFileGroupNo());
			// 썸네일은 1개만 있으니까 무조건 1
			fileDetailVO.setFileSn(1);
			
			// 새로 디테일 담을 fileVO
			FileDetailVO fileDetailVO2 = fileGroupMapper.selectFileDetail(fileDetailVO);
			
			// mediaPostVO에 썸네일 경로 대입
			postVO.setThumNailPath(fileDetailVO2.getFileSaveLocate());
//			log.info("썸네일경로 대입=> 게시글번호{} + 설정썸네일경로{}", postVO.getMediaPostNo(),postVO.getThumNailPath());
			}
		}
	}
	
	// 유튜브 동영상 id 추출 메소드
	public static String extractYoutubeId(String youtubeUrl) {
	    if (youtubeUrl == null || youtubeUrl.trim().isEmpty()) {
	        return null;
	    }
	    
	    // 표준 유튜브 URL 패턴에서 ID 추출
	    Pattern pattern = Pattern.compile(
	        "(?<=watch\\?v=|/videos/|embed\\/|youtu.be\\/|\\/v\\/|\\/e\\/|watch\\?v%3D|watch\\?feature=player_embedded&v=|%2Fvideos%2F|embed%\u200C\u200B2F|youtu.be%2F|%2Fv%2F)[^#\\&\\?\\n]*");
	    Matcher matcher = pattern.matcher(youtubeUrl);
	    
	    return matcher.find() ? matcher.group() : null;
	}
	
	
}
