/**
* Template Name: OnePage
* Template URL: https://bootstrapmade.com/onepage-multipurpose-bootstrap-template/
* Updated: Aug 07 2024 with Bootstrap v5.3.3
* Author: BootstrapMade.com
* License: https://bootstrapmade.com/license/
*/

(function() {
  "use strict";

  /**
   * Apply .scrolled class to the body as the page is scrolled down
   */


  /**
   * Mobile nav toggle
   */
  const mobileNavToggleBtn = document.querySelector('.mobile-nav-toggle');

  function mobileNavToogle() {
    document.querySelector('body').classList.toggle('mobile-nav-active');
    mobileNavToggleBtn.classList.toggle('bi-list');
    mobileNavToggleBtn.classList.toggle('bi-x');
  }

  /**
   * Hide mobile nav on same-page/hash links
   */
  document.querySelectorAll('#navmenu a').forEach(navmenu => {
    navmenu.addEventListener('click', () => {
      if (document.querySelector('.mobile-nav-active')) {
        mobileNavToogle();
      }
    });

  });

  /**
   * Toggle mobile nav dropdowns
   */
  document.querySelectorAll('.navmenu .toggle-dropdown').forEach(navmenu => {
    navmenu.addEventListener('click', function(e) {
      e.preventDefault();
      this.parentNode.classList.toggle('active');
      this.parentNode.nextElementSibling.classList.toggle('dropdown-active');
      e.stopImmediatePropagation();
    });
  });

  /**
   * Preloader
   */
  const preloader = document.querySelector('#preloader');
  if (preloader) {
    window.addEventListener('load', () => {
      preloader.remove();
    });
  }

  /**
   * Scroll top button
   */
  let scrollTop = document.querySelector('.scroll-top');

  function toggleScrollTop() {
    if (scrollTop) {
      window.scrollY > 100 ? scrollTop.classList.add('active') : scrollTop.classList.remove('active');
    }
  }
  scrollTop.addEventListener('click', (e) => {
    e.preventDefault();
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  });

  window.addEventListener('load', toggleScrollTop);
  document.addEventListener('scroll', toggleScrollTop);

  /**
   * Animation on scroll function and init
   */
  function aosInit() {
    AOS.init({
      duration: 600,
      easing: 'ease-in-out',
      once: true,
      mirror: false
    });
  }
  window.addEventListener('load', aosInit);

  /**
   * Initiate Pure Counter
   */
  new PureCounter();

  /**
   * Initiate glightbox
   */
  const glightbox = GLightbox({
    selector: '.glightbox'
  });

  /**
   * Init swiper sliders
   */
  function initSwiper() {
    document.querySelectorAll(".init-swiper").forEach(function(swiperElement) {
      let config = JSON.parse(
        swiperElement.querySelector(".swiper-config").innerHTML.trim()
      );

      if (swiperElement.classList.contains("swiper-tab")) {
        initSwiperWithCustomPagination(swiperElement, config);
      } else {
        new Swiper(swiperElement, config);
      }
    });
  }

  window.addEventListener("load", initSwiper);

  /**
   * Init isotope layout and filters
   */
  document.querySelectorAll('.isotope-layout').forEach(function(isotopeItem) {
    let layout = isotopeItem.getAttribute('data-layout') ?? 'masonry';
    let filter = isotopeItem.getAttribute('data-default-filter') ?? '*';
    let sort = isotopeItem.getAttribute('data-sort') ?? 'original-order';

    let initIsotope;
    imagesLoaded(isotopeItem.querySelector('.isotope-container'), function() {
      initIsotope = new Isotope(isotopeItem.querySelector('.isotope-container'), {
        itemSelector: '.isotope-item',
        layoutMode: layout,
        filter: filter,
        sortBy: sort
      });
    });

    isotopeItem.querySelectorAll('.isotope-filters li').forEach(function(filters) {
      filters.addEventListener('click', function() {
        isotopeItem.querySelector('.isotope-filters .filter-active').classList.remove('filter-active');
        this.classList.add('filter-active');
        initIsotope.arrange({
          filter: this.getAttribute('data-filter')
        });
        if (typeof aosInit === 'function') {
          aosInit();
        }
      }, false);
    });

  });

  /**
   * Frequently Asked Questions Toggle
   */
  document.querySelectorAll('.faq-item h3, .faq-item .faq-toggle').forEach((faqItem) => {
    faqItem.addEventListener('click', () => {
      faqItem.parentNode.classList.toggle('faq-active');
    });
  });

  /**
   * Correct scrolling position upon page load for URLs containing hash links.
   */
  window.addEventListener('load', function(e) {
    if (window.location.hash) {
      if (document.querySelector(window.location.hash)) {
        setTimeout(() => {
          let section = document.querySelector(window.location.hash);
          let scrollMarginTop = getComputedStyle(section).scrollMarginTop;
          window.scrollTo({
            top: section.offsetTop - parseInt(scrollMarginTop),
            behavior: 'smooth'
          });
        }, 100);
      }
    }
  });

  /**
   * Navmenu Scrollspy
   */
  let navmenulinks = document.querySelectorAll('.navmenu a');

  function navmenuScrollspy() {
    navmenulinks.forEach(navmenulink => {
      if (!navmenulink.hash) return;
      let section = document.querySelector(navmenulink.hash);
      if (!section) return;
      let position = window.scrollY + 200;
      if (position >= section.offsetTop && position <= (section.offsetTop + section.offsetHeight)) {
        document.querySelectorAll('.navmenu a.active').forEach(link => link.classList.remove('active'));
        navmenulink.classList.add('active');
      } else {
        navmenulink.classList.remove('active');
      }
    })
  }
  window.addEventListener('load', navmenuScrollspy);
  document.addEventListener('scroll', navmenuScrollspy);

})();



   ///// 굿즈샵 그룹명 클릭 시 버튼 색상 변경 시작 /////
   const gdsList = $(".card-artistNm");
   gdsList.on("click", function() {
      console.log("확인");

      // 선택 버튼 색상 변경
      $(".card-artistNm").removeClass("active");
      $(this).addClass("active");
   ///// 굿즈샵 그룹명 클릭 시 버튼 색상 변경 끝 /////

   
   ///// 굿즈카드 그룹버튼 클릭 시 데이터 비동기 처리 시작 /////
      const artGroupNo = $(this).data("group");
      const memNo = userVO.userNo;
      console.log("groupNO", artGroupNo);
      console.log("memNo", memNo);
      
      const data = {
            "artGroupNo" : artGroupNo,
            "memNo" : memNo
      }
      console.log("data 확인 ", data);

	  async function renderGoods() {
		const result = await axios.post("/oho/getGoodsList", data);
		console.log("renderGoods -> result : ", result.data);
	     // 굿즈리스트 렌더링
		 renderGoodsList(result.data);
	  }
	  
	  renderGoods();
	  

   })
   ///// 굿즈카드 그룹버튼 클릭 시 데이터 비동기 처리 끝 /////
   
   ///// 굿즈리스트 렌더링 시작 /////
   function renderGoodsList(artGroupList) {
   const container = document.getElementById("goodsListContainer");
   container.innerHTML = ""; // 기존 내용 비우기

   artGroupList.forEach(artGroup => {
      console.log("artGroup : ", artGroup);
      const artGroupNo = artGroup.artGroupNo;
      console.log("artGroupNo : ", artGroupNo);
      
      artGroup.goodsVOList.forEach(goods => {
         console.log("goods : ", goods);
         const gdsNo = goods.gdsNo;
         console.log("gdsNo : ", gdsNo);
         
         let goodsImg = "";
         
         if (goods.fileGroupVO?.fileDetailVOList?.length > 0 && goods.fileGroupVO.fileDetailVOList[0] != null) {
            goodsImg = goods.fileGroupVO.fileDetailVOList[0].fileSaveLocate;
            console.log("goodsImg : ", goodsImg);
            
            // 굿즈샵 상세페이지 /shop/artistGroup/{artistGroup}/detail/{gdsNo}
            console.log("굿즈 상품 구분 : ", goods.commCodeGrpNo);
            const form = document.createElement("form");
            // 일반 굿즈 상품일 경우
            if(goods.commCodeGrpNo=='GD01') {
               form.action = `/shop/artistGroup/` + artGroupNo + `/detail/` + gdsNo;
               form.method = "get";
               
            }else { // 티켓(GD02)일 경우
               form.action = `/shop/ticket/ticketDetail`;
               form.method = "get";
            }
            
            const goodsFile = goods.fileGroupVO.fileDetailVOList[0];
            console.log("굿즈 파일이다!!", goodsFile);
            
            const formattedPrice = goods.unitPrice.toLocaleString(); 
               form.innerHTML = `
                    <input type="hidden" name="gdsNo" value="${gdsNo}">
                    <button class="card-goods">
                        <img src="/upload${goodsFile.fileSaveLocate}" class="bg-img" />
                      </button>
                      <div class="goods-name"><h6>${goods.gdsNm}</h6></div>
                      <h5>₩${formattedPrice}</h5>
               `;
         // class = swiper-slide인 div만들기
         const divSwiper = document.createElement("div");
         divSwiper.className = "swiper-slide";
         
         // 안에 form 태그 넣기
         divSwiper.append(form);
   
         container.appendChild(divSwiper);
         }
         
      })
      
   });
   
   if (swiper) {
      swiper.update(); // 새로 들어온 슬라이드 감지
   }
   
}
   ///// 굿즈리스트 렌더링 끝 /////
   
   ///// 디엠 리스트 렌더링 시작 /////
   function getDMList() {
         
         axios.get("/oho/getDMList").then(resp => {
            console.log("getDMList : ", resp.data);
            
            renderDMList(resp.data);
         })
      }
      
      function renderDMList(dmList) {
         
         const dmListDiv = document.getElementById("dmListContainer");
         dmListDiv.innerHTML = "";
         
         let str = "";
         dmList.forEach((artGroup, index) => {
            if(index <= 9) {
               str += `
                  <input type="hidden" value="${artGroup.artGroupNo}" />
                  <button class="btn-dmlist">
                     <div class="logo-wrap">
                        <img src="/upload${artGroup.fileLogoSaveLocate}">
                     </div>
                     <div class="card-body">
                        <h6>${artGroup.artGroupNm}</h6>
                     </div>
                  </button>
               `;
            }
         });
         dmListDiv.innerHTML = str;
         
      }
   ///// 디엠 리스트 렌더링 끝 /////
   
