/**
 * 티켓 관리자 페이지 검색 js
 * 
 */

const blockSize = 10; // 한 번에 표시할 페이지 수

$(function() {
	
	fn_search(1)
	// 검색 버튼 클릭 시
	$('#btnSearch').on('click', function() {
		fn_search(1);
	});
	
	//초기화 버튼 클릭시
	$('#resetBtn').on('click', function(){
		$('#srhFrm')[0].reset();
		fn_search(1);
	})
});


// 공통 검색 및 페이징 함수
function fn_search(page) {
	console.log("fn_search실행 data: "+page)
	const datas = {
		reportPostNo: $('#reportPostNo').val(),
		reportGubun: $('#reportGubun').val(),
		reportTitle: $('#reportTitle').val(),
		piMemEmail: $('#piMemEmail').val(),
		reportRegDt: $('#reportRegDt').val(),
		reportTermination: $('#reportTermination').val(),
		reportResult: $('#reportResult').val(),

		
		page: page,
		blockSize: blockSize,
		startRow: (page - 1) * blockSize + 1,
		endRow: page * blockSize
	};
	const instance = axios.create();
	instance.interceptors.request.use(function() { $('#listBody').html('<tr><td colspan="5" class="text-center">로딩 중...</td></tr>'); });

	axios.post('/admin/reportmanage/reportListPost', datas).then(resp => {
		const { content, currentPage, totalPages, startPage, endPage } = resp.data;
	    renderTable(content,currentPage);
	    renderPagination({ currentPage, totalPages, startPage, endPage });
		/*$('#listBody').append(`
		          <tr>
		            <td colspan="10" class="text-center text-primary">안녕하세요</td>
		          </tr>
		        `);*/
	}).catch(() => {
		$('#listBody').html('<tr><td colspan="5" class="text-center text-danger">검색 중 오류 발생</td></tr>');
	})

};

// 테이블 렌더링 함수
function renderTable(data) {
    let html = ''; // row 변수를 빈 문자열로 초기화
    if (data && data.length > 0) {
        data.forEach(item => { // data 배열의 각 신고 객체(item)를 순회
            console.log(item);
            console.log("123123", item.reportPostNo);

            html += `
                 <tr>
                    <td>${item.reportPostNo}</td>
                    <td>${item.reportGubun}</td>
                    <td>${item.reportTitle}</td>
                    <td>${item.piMemName}</td>
                    <td>${item.reportRegDt}</td>
                    <td id="terminationStatus">${item.reportTermination}일</td>
                    <td>${
                        item.reportResult === '001' ? '신고 해지' :
                        item.reportResult === '004' ? '활동 정지' :
                        item.reportResult === 'N' ? '비신고처리' : '미처리'
                    }</td>
                    <td>${item.reportDelYn}</td>
                    <td>
                        <button type="button" class="btn btn-secondary" 
						data-toggle="modal" data-target="#updateModal" 
						id="updateReportmanage" onclick="updateReportmanage('${item.reportPostNo}')">신고상세</button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" data-toggle="modal" id="deleteReport" onclick="deleteReport(${item.reportPostNo})">삭제</button>
                    </td>
                </tr>
               `;
        });
    } else {
        html = '<tr ><td colspan="9" class="text-center">검색 결과가 없습니다.</td></tr>';
    }
    $('#listBody').html(html); // 루프가 끝난 후 HTML 업데이트
}
function translateResult(code) {
    switch(code) {
        case '001': return '신고 해지';
        case '004': return '활동 정지';
        case 'N': return '비신고처리';
        default: return '미처리';
    }
}
// 숫자 세 자리 콤마 포맷 함수
function numberWithCommas(dateStr) {
  return dateStr != null ? dateStr.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",") : '-';
}

//renderPagination실행 data: {"currentPage":1,"totalPages":2,"startPage":1,"endPage":2}
function renderPagination(paging) {
	console.log("renderPagination실행 data: "+JSON.stringify(paging))
  const container = $('#pagination-container');
  container.empty();

  if (!paging || paging.totalPages === 0) {
    return;
  }
 
      const totalPages = paging.totalPages;
      let startPage = Math.floor((paging.currentPage - 1) / blockSize) * blockSize + 1;
      let endPage = startPage + blockSize - 1;
      
      if (endPage > totalPages) {
          endPage = totalPages;
      }

      let html = '<ul class="pagination">';

      const disabledFirst = startPage <= 1 ? 'disabled' : '';
      const disabledLast = endPage >= totalPages ? 'disabled' : '';

      html += `<li class="page-item ${disabledFirst}">
          <a class="page-link" href="#" onclick="fn_search(1)">&lt;&lt;</a></li>`;
      html += `<li class="page-item ${disabledFirst}">
          <a class="page-link" href="#" onclick="fn_search(${paging.currentPage - 1})">&lt;</a></li>`;

      for (let i = startPage; i <= endPage; i++) {
          const active = i === paging.currentPage ? 'active' : '';
          html += `<li class="page-item ${active}">
              <a class="page-link" href="#" onclick="fn_search(${i})">${i}</a></li>`;
      }

      html += `<li class="page-item ${disabledLast}">
          <a class="page-link" href="#" onclick="fn_search(${endPage + 1})">&gt;</a></li>`;
      html += `<li class="page-item ${disabledLast}">
          <a class="page-link" href="#" onclick="fn_search(${totalPages})">&gt;&gt;</a></li>`;
		 
      html += '</ul>';
	
      container.append(html);
	  

}

