package com.ohot.shop.controller;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ohot.shop.service.TicketService;
import com.ohot.shop.vo.GoodsVO;
import com.ohot.shop.vo.SeatVO;
import com.ohot.shop.vo.TicketVO;
import com.ohot.shop.vo.TkDetailVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/shop/ticket")
public class TicketController {
	
	@Autowired
	TicketService ticketService;
	
	//티켓 리스트 출력
	@GetMapping("/ticketList")
	public String ticketList(Model model,@RequestParam(value = "tkCtgr", required = false) String tkCtgr) {
		List<GoodsVO> goodsVOList = this.ticketService.ticketList(tkCtgr);
		log.info("ticketList -> GoodsVO : "+goodsVOList);
		
		model.addAttribute("goodsVOList", goodsVOList);
		
		
		return "ticket/ticketList";
	}
	
	@ResponseBody
	@PostMapping("/ticketListPost")
	public List<GoodsVO> ticketListPost(@RequestBody Map<String, String> param ,Model model) {
		String tkCtgr = param.get("tkCtgr");
	    log.info("tkCtgr: " + tkCtgr);
		List<GoodsVO> goodsVOList = this.ticketService.ticketList(tkCtgr);
		model.addAttribute("goodsVOList", goodsVOList);
		log.info("ticketList -> GoodsVO : "+goodsVOList);		
		
		return goodsVOList;
	}
	 
	//티켓 디테일
	@GetMapping("/ticketDetail")
	public String ticketDetail(Model model
			, @RequestParam(value="gdsNo") int gdsNo
			, GoodsVO goodsVO) {
		log.info("ticketDetail -> gdsNo: " +gdsNo);
		log.info("ticketDetail -> ticketVO: " +goodsVO);

		goodsVO = this.ticketService.ticketDetail(goodsVO);
		log.info("ticketDetail -> goodsVO(후): "+goodsVO);
		
		model.addAttribute("goodsVO", goodsVO);
		
		return "ticket/ticketDetail";
	}
	
	//티켓 좌석선택
	@GetMapping("/seat")
	public String seat(long tkNo, long tkDetailNo ,  Model model) {
		log.info("seat->tkNo: "+tkNo);
		log.info("seat->tkDetailNo: "+tkDetailNo);
		
		//좌석정보
		List<SeatVO> seatVOList = this.ticketService.tkSeat(tkDetailNo);
		model.addAttribute("seatVOList", seatVOList);
		log.info("seat->seatVOList : "+seatVOList);
		
		// 좌석 구역 이름 추출 (중복 제거)
		Set<String> sectionSet = seatVOList.stream().map(SeatVO::getSeatSection)
		    .collect(Collectors.toCollection(LinkedHashSet::new)); // 순서 유지
		model.addAttribute("sectionList", new ArrayList<>(sectionSet));
		log.info("이것인가"+sectionSet);
		
		// 2. 층별 - 구역별 Map 생성 (중복 제거)
	    Map<Integer, List<String>> floorSectionMap = new LinkedHashMap();
	    for (SeatVO seat : seatVOList) {
	        floorSectionMap
	            .computeIfAbsent(seat.getSeatFloor(), k -> new ArrayList<>())
	            .add(seat.getSeatSection());
	    }
	    
	    // 3. 각 층의 구역 리스트 중복 제거
	    floorSectionMap.replaceAll((floor, sections) ->
	        sections.stream().distinct().toList()
	    );
	    model.addAttribute("floorSectionMap", floorSectionMap);
	    
		//다른회차정보
		List<TkDetailVO> tkDetailVOList =this.ticketService.seatTkDetail(tkNo);
		model.addAttribute("tkDetailVOList", tkDetailVOList);
		log.info("seat-> tkDetailVOList: "+tkDetailVOList);
		
		return "ticket/seat";
	}
	
}
