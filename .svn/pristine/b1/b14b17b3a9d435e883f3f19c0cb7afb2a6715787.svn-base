package com.ohot.shop.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ohot.mapper.SeqGeneratorMapper;
import com.ohot.shop.service.CartService;
import com.ohot.shop.vo.CartVO;
import com.ohot.vo.ArtistGroupVO;
import com.ohot.vo.CustomUser;
import com.ohot.vo.SeqGeneratorVO;
import com.ohot.vo.UsersVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/shop")
public class CartController {
	
	@Autowired
	SeqGeneratorMapper seqGeneratorMapper;
	
	@Autowired
	CartService cartService;
	
	//장바구니를 추가 했을 때 실행되는 함수
	@ResponseBody
	@PostMapping("/cart/addAjax")
	public String cartAdd(ArtistGroupVO artistGroupVO, @AuthenticationPrincipal CustomUser customUser) {
		
		UsersVO usersVO = null;
		SeqGeneratorVO seqGeneratorVO = new SeqGeneratorVO();
		
		//로그인 체크
		if(customUser == null) {
			return "noLogin";
		}
		
		else {
			usersVO = customUser.getUsersVO();
			seqGeneratorVO.setTaskSeNm("cart");
			
			//장바구니 순번 가져오기
			// NULL or seqGeneratorVO return;
			seqGeneratorVO = seqGeneratorMapper.findSeqGenerator(seqGeneratorVO);
			
			// seqGenerator 값이 null인 경우
			if (seqGeneratorVO == null) {
				seqGeneratorVO = new SeqGeneratorVO();
				seqGeneratorVO.setTaskSeNm("cart");
				seqGeneratorMapper.updateSeqGeneratorDate(seqGeneratorVO);
				seqGeneratorVO = seqGeneratorMapper.findSeqGenerator(seqGeneratorVO);
				log.info("seqGeneratorVO : " + seqGeneratorVO);
			}
			
			int cartNo = Integer.parseInt(seqGeneratorVO.getCrtrYmd() + seqGeneratorVO.getReqSn());
			
			//장바구니 데이터 적재
			CartVO cart = new CartVO();
			cart.setCartNo(cartNo);
			cart.setGdsNo(artistGroupVO.getGoodsVOList().get(0).getGdsNo());
			cart.setMemNo(usersVO.getUserNo());
			cart.setQty(artistGroupVO.getGoodsVOList().get(0).getQty());
			cart.setProdOption(artistGroupVO.getGoodsVOList().get(0).getCommCodeGrpNo());
			cart.setAmount(artistGroupVO.getGoodsVOList().get(0).getAmount());
			
			int result = cartService.cartInsert(cart, seqGeneratorVO);
			log.info("artistGroupVO : " + artistGroupVO);
			
			if(result > 0) {
				return "success";
			}else {
				return "fail";
			}
		}
	}
	
	//로그인한 유저의 장바구니 목록 가져오기
	@GetMapping("/cart/list")
	public String cartList(Model model, @AuthenticationPrincipal CustomUser customUser) {
		UsersVO usersVO = null;
		
		//로그인 체크
		if(customUser == null) {
			return "noLogin";
		}	
		
		else {
			usersVO = customUser.getUsersVO();
			
			List<CartVO> cartList = cartService.cartList(usersVO);
			log.info("cartList" + cartList);
			model.addAttribute("cartList", cartList);
		}
		
		return "shop/cart/list";
		
	}
	
	//로그인한 유저의 요청한 상품을 장바구니에서 제거
	@ResponseBody
	@PostMapping("/cart/delete")
	public String cartDelete(@RequestBody int gdsNo, @AuthenticationPrincipal CustomUser customUser) {
		
		log.info("gdsNo : " + gdsNo);
		
		UsersVO usersVO = null;
		CartVO cartVO = new CartVO();
		
		//로그인 체크
		if(customUser == null) {
			return "noLogin";
		}	
		
		else {
			usersVO = customUser.getUsersVO();
			cartVO.setGdsNo(gdsNo);
			cartVO.setMemNo(usersVO.getUserNo());
			
			int result = cartService.cartDelete(cartVO);
			if(result > 0) {
				return "success";
			}else {
				return "fail";
			}
		}
	}
}