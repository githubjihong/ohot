package com.ohot.home.media.controller;

import java.security.Principal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ohot.home.media.service.MediaLiveBoardService;
import com.ohot.home.media.vo.MediaPostVO;
import com.ohot.mapper.FileGroupMapper;
import com.ohot.vo.FileDetailVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/oho/community")
public class MediaLiveController {
	
	@Autowired
	MediaLiveBoardService mediaLiveBoardService;
	
	@Autowired
	FileGroupMapper fileGroupMapper;
	
	/*
	 * 미디어 메인페이지
	 *
	 */
	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/media")
	public String mediaHome(@RequestParam(value = "artGroupNo") String artGroupNo
			, Model model
			, Principal principal) {
		
		log.info("media page진입, artGroupNo: {}", artGroupNo);
		
		//시큐리티 회원 정보
		log.info("mediaHome->user정보 Principal: {}", principal);
		
		Map<String, Object> artGroupNoMap = new HashMap<>();
		artGroupNoMap.put("artGroupNo", artGroupNo);
		
		List<MediaPostVO> mediaPostVOList = mediaLiveBoardService.getMediaSerchList(artGroupNoMap);
		log.info("mediaHome->mediaPostVoList: {}", mediaPostVOList);
		
		// 배너 최대 갯수 5개로 제한
		// Stream을 사용해 보자
		List<MediaPostVO> banerPostVOList = mediaPostVOList.stream()
														.filter(mediaPostVo -> "Y".equals(mediaPostVo.getIsbannerYn()))
														.limit(5)
														.collect(Collectors.toList()); //왜 바로 toList가 아니고 collectors지?
		
		//파일 썸네일 경로 처리
		setThumbNailPath(mediaPostVOList);
		setThumbNailPath(banerPostVOList);
		
		model.addAttribute("mediaPostVOList", mediaPostVOList);
		model.addAttribute("banerPostVOList", banerPostVOList);
		
		return "media/mediaMain";
	}
	
	/*
	 * 최신 미디어 페이지
	 * 
	 */
	
//	@PreAuthorize("hasAnyRole('MEM', 'ART')")
	@GetMapping("/media/newMedia")
	public String newMediaHome(Model model) {
		
		log.info("newMediaList  진입");
		
		List<MediaPostVO> mediaPostVOList = mediaLiveBoardService.getMediaList();
		log.info("newMediaHome->mediaPostVOList: {}", mediaPostVOList);
		
		model.addAttribute("mediaPostVOList", mediaPostVOList);
		
		
		return "media/newMediaList";
	}
	
	private void setThumbNailPath(List<MediaPostVO> mediaPostVOList) {
		//파일 디테일 경로 가져오기
		
		// 일단 포스트에 저장된 파일 그룹넘버를 가져와야함
		// 
		FileDetailVO fileDetailVO = new FileDetailVO();
		
		for(MediaPostVO postVO : mediaPostVOList) {
			// 하나씩 파일그룹 넘버 꺼내기
			fileDetailVO.setFileGroupNo(postVO.getFileGroupNo());
			// 썸네일은 1개만 있으니까 무조건 1
			fileDetailVO.setFileSn(1);
			
			// 새로 디테일 담을 fileVO
			FileDetailVO fileDetailVO2 = fileGroupMapper.selectFileDetail(fileDetailVO);
			
			// mediaPostVO에 썸네일 경로 대입
			postVO.setThumNailPath(fileDetailVO2.getFileSaveLocate());
//			log.info("썸네일경로 대입=> 게시글번호{} + 설정썸네일경로{}", postVO.getMediaPostNo(),postVO.getThumNailPath());
		}

	}
	
}
