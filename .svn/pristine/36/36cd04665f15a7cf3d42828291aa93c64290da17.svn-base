package com.ohot.security;

import java.io.IOException;

import org.springframework.security.core.AuthenticationException;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.stereotype.Component;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;


/*
인증 실패 시 페이지 이동.
우선 테스트에서는 인증 실패 시 login 페이지로 돌림 (스프링 시큐리티의 기본값이 login페이지로 돌리기에 굳이 만들지는 않아도 됨)
SecurityConfig.java 파일의 filterChain 메서드의 아래 부분에 연결됨.
.formLogin(form -> form.loginPage("/login")
                             .failureHandler(customLoginFailureHandler()))
*/
@Slf4j
@Component
public class CustomLoginFailureHandler implements AuthenticationFailureHandler{

	@Override
	public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response,
			AuthenticationException exception) throws IOException, ServletException {
		log.info("CustomLoginFailureHandler -> 인증 실패 {}", exception.getMessage());
		
		response.sendRedirect("/login");
	}

}
