package com.ohot.employee.controller;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ohot.employee.service.EmployeeService;
import com.ohot.employee.vo.ApprovalLineVO;
import com.ohot.employee.vo.ApprovalVO;
import com.ohot.employee.vo.ApprovedConcertPlanVO;
import com.ohot.employee.vo.AtrzDocVO;
import com.ohot.employee.vo.AtrzLineVO;
import com.ohot.employee.vo.DepartmentVO;
import com.ohot.vo.EmployeeVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/emp")
public class EmployeeController {
	
	@Autowired
	EmployeeService employeeService;
	
	@GetMapping("/home")
	public String home(){
		log.info("직원 홈페이지 (전자결재)");
		return "employee/home";
	}
	
	@GetMapping("/treeList")
	public String treeList() {
		
		return "employee/tree";
	}
	
	@ResponseBody
	@GetMapping("/treeListAjax")
	public String treeListAjax(){
		
		List<DepartmentVO> treeList = this.employeeService.treeList();
		
		
		JSONArray jsonArray = new JSONArray();
		Set<String> deptSet = new HashSet<>();
		
		for(DepartmentVO row : treeList) {
			
			log.info("row:" + row);
			
			String deptNo = String.valueOf(row.getDeptNo());
			String upDept = (row.getUpDept() == 0) ? "#" : String.valueOf(row.getUpDept());
			String deptNm = row.getDeptNm();
			
			// json  import org.json.JSONArray; import org.json.JSONObject; 사용!
			if(!deptSet.contains(deptNo)) {
				
				
				JSONObject deptNode = new JSONObject();
				deptNode.put("id", deptNo);
				deptNode.put("parent", upDept);
				deptNode.put("text", deptNm != null ? deptNm : "(이름없음)");
				deptNode.put("icon", "fas fa-folder");
				jsonArray.put(deptNode);
				deptSet.add(deptNo);
			}
			
			//사원정보 추가
			List<EmployeeVO> empList = row.getEmployeeVOList();
			
			if(empList != null) {
				
				for(EmployeeVO emp : empList) {
					
					log.info("emp" + emp);
					
					String empNo = String.valueOf(emp.getEmpNo());
					String empNm = emp.getEmpNm();
					String position = emp.getPosition();
					String jbgdCd = emp.getJbgdCd();
					
					JSONObject empNode = new JSONObject();
					empNode.put("id", empNo);
					empNode.put("parent", deptNo);
					empNode.put("text", empNm + " (" + position + ")");
					empNode.put("icon", "fas fa-user-circle");
					
					
					JSONObject data = new JSONObject();
					String empEmail = emp.getEmpEmlAddr();
					position = emp.getPosition();
					jbgdCd = emp.getJbgdCd();
					/* deptNm = emp.getDepartmentVO().getDeptNm(); */
					String stampFileGroupNo = String.valueOf(emp.getStampFileGroupNo());
					String profileSaveLocate = emp.getProfileSaveLocate();
					
					data.put("email", empEmail);
					data.put("position", position);
					data.put("deptNm", deptNm);
					data.put("empNm", empNm);
					data.put("position", position);
					data.put("jbgdCd", jbgdCd);
					data.put("stampFileGroupNo", stampFileGroupNo);
					data.put("profileSaveLocate", profileSaveLocate);
							
					empNode.put("data", data);
					
					jsonArray.put(empNode);
				}
			}
		}
		log.info("jsonArray : " +jsonArray.toString());
		
		return jsonArray.toString();
	}
	
	@GetMapping("/atrzHome")
	public String atrzHome() {
		
		return "employee/atrz/atrzHome";
	}
	
	@GetMapping("/empCalendar")
	public String empCalendar() {
		
		return "employee/calendar/empCalendar";
	}
	
	@GetMapping("/atrzHome/form")
	public String documentList(@RequestParam(value="formNo") int formNo) {
		
		log.info("formNo : " + formNo);
		
		if(formNo == 2) {
			return "employee/document/ticketPlan";
		}else {
			return "employee/document/goodsPlan";
		}
		
	}
	
	@GetMapping("/atrzList")
	public String atrzList(AtrzLineVO atrzLineVO, Model model) {
		
		log.info("atrzList->atrzLineVO" + atrzLineVO);
		
		List<DepartmentVO> atrzAllList = this.employeeService.atrzAllList(atrzLineVO);
		log.info("atrzAllList" + atrzAllList);
		model.addAttribute("atrzAllList", atrzAllList);
		
		return "employee/atrz/atrzList";
	}
	
	@GetMapping("/atrzDocBox")
	public String atrzDocBox() {
		
		return "employee/atrz/atrzDocBox";
	}
	
	@GetMapping("/empProfile")
	public String empProfile() {
		
		return "employee/empProfile/profile";
	}
	
	@ResponseBody
	@PostMapping("/saveApprovalLine")
	public Map<String, Object> saveApprovalLine(@RequestBody ApprovalLineVO data) {

		log.info("approvals" + data.getApprovals());
		log.info("referrers" + data.getReferrers());
		
		List<ApprovalVO> approvalVOList = data.getApprovals();
		List<ApprovalVO> referrerVOList = data.getReferrers();
		
		Map<String, Object> resultMap = new HashMap<>();
		resultMap.put("approvalVOList", approvalVOList);
		resultMap.put("referrerVOList", referrerVOList);
	
		return resultMap;
	}
	
	@ResponseBody
	@PostMapping("/atrzDocPost")
	public String atrzDocPost(@RequestPart("test") AtrzDocVO atrzDocVO, Model model) {
		
		log.info("atrzDocPost : " + atrzDocVO);
		/*
		 * atrzDocPost : AtrzDocVO(atrzDocNo=null, docFmNo=2, drftTtl=, drftCn=테스트입니다,
		 * emrgYn=N, drftYmd=null, ddlnYmd=null, drftEmpNo=202503240016,
		 * offcsPhoto=null, drftJbgdCd=P01, fileGroupNo=0, drftStampFileGroupNo=0,
		 * prefix=null, atrzRefVOList=[AtrzRefVO(atrzRefNo=0, refEmpNo=202301010005,
		 * atrzDocNo=null, atrzIdntyYn=null, refJbgdCd=P05), AtrzRefVO(atrzRefNo=0,
		 * refEmpNo=202301010010, atrzDocNo=null, atrzIdntyYn=null, refJbgdCd=P04),
		 * AtrzRefVO(atrzRefNo=0, refEmpNo=202301010025, atrzDocNo=null,
		 * atrzIdntyYn=null, refJbgdCd=P03)], atrzLineVOList=[AtrzLineVO(atrzLnNo=0,
		 * atrzDocNo=null, atrzEmpNo=202301010004, atrzStts=null, atrzOpnn=null,
		 * rjctRsn=null, atrzDt=null, atrzSn=0, aprvrJbgdCd=P05, aprvrOffcsPhoto=null,
		 * lastAtrzYn=null, aprvrStampFileGroupNo=0), AtrzLineVO(atrzLnNo=0,
		 * atrzDocNo=null, atrzEmpNo=202301010009, atrzStts=null, atrzOpnn=null,
		 * rjctRsn=null, atrzDt=null, atrzSn=0, aprvrJbgdCd=P04, aprvrOffcsPhoto=null,
		 * lastAtrzYn=null, aprvrStampFileGroupNo=0)],
		 * approvedConcertPlanVO=ApprovedConcertPlanVO(conPlanNo=0, atrzDocNo=null,
		 * gdsNm=에스파, tkCtgr=콘서트, tkLctn=아카데미홀, playerNm=에스파, hostOrg=오호엔터,
		 * expectedAudience=10000, expectedBudget=40000000, background=테스트입니다,
		 * requests=테스트를할거에요, remarks=하하하ㅏ, regYmd=null))
		 */
		
		String atrzDocNo = this.employeeService.atrzDocInsert(atrzDocVO);
		log.info("atrzDocPost->atrzDocInsert : " + atrzDocNo);
		
		return atrzDocNo;
	}
	
	@GetMapping("/atrzDocDetail")
	public String atrzDocDetail(
			@RequestParam(value="atrzDocNo") String atrzDocNo
			, Model model) {
		
		DepartmentVO atrzDocVODetail = this.employeeService.atrzDocDetail(atrzDocNo);
		
		List<DepartmentVO> atrzRefVOList = this.employeeService.atrzRefDetail(atrzDocNo);
		
		List<DepartmentVO> atrzLineVOList = this.employeeService.atrzLineDetail(atrzDocNo);
		
		ApprovedConcertPlanVO approvedConcertPlanVODetail = this.employeeService.aprrovedConcertPlanDetail(atrzDocNo);
		
		model.addAttribute("atrzDocVODetail", atrzDocVODetail);
		model.addAttribute("atrzRefVOList", atrzRefVOList);
		model.addAttribute("atrzLineVOList", atrzLineVOList);
		model.addAttribute("approvedConcertPlanVODetail", approvedConcertPlanVODetail);
		
		return "employee/atrz/atrzDetail";
	}
	
	@ResponseBody
	@PostMapping("/atrzLineUpdate")
	public String atrzLineUpdate(@RequestBody AtrzLineVO atrzLineVO) {
	
		int result = this.employeeService.atrzLineUpdate(atrzLineVO);

		if(result != 0) {
			return "success";
		}
		
		return "fail";
	}
}
