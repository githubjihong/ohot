package com.ohot.api;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.client.RestTemplate;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ohot.config.KakaoApiConfig;
import com.ohot.controller.HomeController;
import com.ohot.service.MemberService;
import com.ohot.service.UsersService;
import com.ohot.vo.KakaoInfoVO;
import com.ohot.vo.UsersVO;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequestMapping("/kakao")
@RequiredArgsConstructor
@Controller
public class OAuthController {

	private final KakaoApiConfig kakaoApi;

	@Autowired
	BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Autowired
	UsersService usersService;
	
	@Autowired
	HomeController homeController;
	
	@GetMapping("/login")
	public String kakaoConnect() {
		log.info("카카오로그인 인가 요청 전");
		
		StringBuffer url = new StringBuffer();
		url.append("https://kauth.kakao.com/oauth/authorize?");
		url.append("client_id="+kakaoApi.getApiKey());
		url.append("&redirect_uri="+kakaoApi.getRedirectUri());
		url.append("&response_type=code");
		
		log.info("kakaoLogin -> url : " + url);
		
		return "redirect:"+url.toString();
	}
	
	// 토큰 받는 메소드 // 회원, 신규회원을 분별하여 리다이렉트 분기처리
	@GetMapping("/callback")
	public String getAccessToken(
							@RequestParam String code
							, HttpServletRequest request
							, Model model		
				) throws Exception{
		// HTTP Header 생성
		 HttpHeaders headers = new HttpHeaders();
	     headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
	     
	     // HTTP Body 생성
	     MultiValueMap<String, String> body = new LinkedMultiValueMap<>();
	     body.add("grant_type", "authorization_code");
	     body.add("client_id", kakaoApi.getApiKey());
	     body.add("redirect_uri", kakaoApi.getRedirectUri());
	     body.add("code", code);
	     body.add("client_secret", kakaoApi.getClientSecret());
	     
	     // HTTP 요청 보내기
	     HttpEntity<MultiValueMap<String, String>> kakaoTokenRequest = new HttpEntity<>(body, headers);
	     RestTemplate rt = new RestTemplate();
	     ResponseEntity<String> response = rt.exchange(
	            "https://kauth.kakao.com/oauth/token",
	             HttpMethod.POST,
	             kakaoTokenRequest,
	             String.class
	        );
	     
	     // HTTP 응답 (JSON) -> 액세스 토큰 파싱
	     String responseBody = response.getBody();
	     ObjectMapper objectMapper = new ObjectMapper();
	     JsonNode jsonNode = objectMapper.readTree(responseBody);
	     
	     String tokenType = jsonNode.get("token_type").asText();
	     log.info("getAccessToken -> tokenType : " + tokenType);
	     String accessToken = jsonNode.get("access_token").asText();
	     log.info("getAccessToken -> accessToken : " + accessToken);
	     
	     // 로그인 시도한 사용자의 정보 가져오기
	     KakaoInfoVO kakaoInfoVO = getKakaoInfo(accessToken);
	     log.info("getAccessToken -> MemberVO : " + kakaoInfoVO);
	     
	     UsersVO userVO = this.usersService.findByKakaoEmail(kakaoInfoVO.getEmail());
	     if(userVO == null) {
	    	 
	    	 String email = (String)kakaoInfoVO.getEmail();
	    	 
	    	 log.info("email : " + kakaoInfoVO.getEmail());
	    	 
	    	 HttpSession session = request.getSession();
	    	 session.setAttribute("email", kakaoInfoVO.getEmail());
	    	 
	    	 return homeController.signup(email, null);
	     }
	     else return "redirect:/oho";
	}
	
	// 사용자 정보 가져오기
	public KakaoInfoVO getKakaoInfo(String accessToken) throws Exception {
		log.info("accessToken : "+accessToken);
		// HTTP Header 생성
        HttpHeaders headers = new HttpHeaders();
        headers.add("Authorization", "Bearer " + accessToken);
        headers.add("Content-type", "application/x-www-form-urlencoded;charset=utf-8");
        
        // HTTP 요청 보내기
        HttpEntity<MultiValueMap<String, String>> kakaoUserInfoRequest = new HttpEntity<>(headers);
        log.info("kakaoUserInfoRequest" + kakaoUserInfoRequest);
        RestTemplate rt = new RestTemplate();
        ResponseEntity<String> response = rt.exchange(
                "https://kapi.kakao.com/v2/user/me",
                HttpMethod.POST,
                kakaoUserInfoRequest,
                String.class
        );
        
        // responseBody에 있는 정보 꺼내기
        String responseBody = response.getBody();
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = objectMapper.readTree(responseBody);
        log.info("jsonNode : " + jsonNode);
        // jsonNode : {"id":3971274009,"connected_at":"2025-03-20T13:16:08Z","properties":{"nickname":"오세인"},"kakao_account":{"profile_nickname_needs_agreement":false,"profile":{"nickname":"오세인","is_default_nickname":false},"has_email":true,"email_needs_agreement":false,"is_email_valid":true,"is_email_verified":true,"email":"zz.e.os@kakao.com"}}

        String email = jsonNode.get("kakao_account").get("email").asText();
        
		return new KakaoInfoVO(email);
	}
		
}
